import { aa as HookDefinition, w as PageContext, U as UseQueryOptions, x as CommonPluginOptions } from './hattip-handler-DUB3s5pu.js';
import { ReactElement } from 'react';
import '@hattip/compose';
import 'vite';
import '@hattip/core';

/** Client-side customization hooks */
interface ClientHooks {
    /** Called before the client starts */
    beforeStart?(): void | Promise<void>;
    /**
     * This is called before the page is rendered. It's used for adding custom
     * data to the page context.
     */
    extendPageContext?: HookDefinition<(ctx: PageContext) => void>;
    /**
     * This hook is intended for wrapping the React app with provider
     * components on the client only.
     */
    wrapApp?(app: ReactElement): ReactElement;
    /**
     * This hook is called when the user navigates to a new page, including when
     * it is first hydrated/rendered on the client. It can be used for tracking
     * page views or sending analytics events.
     */
    onNavigation?: HookDefinition<(url: URL) => void>;
}

/** Options passed to {@link startClient} */
interface StartClientOptions {
    /** Default options for {@link useQuery} hooks */
    defaultQueryOptions?: UseQueryOptions;
    /** Client hooks */
    hooks?: ClientHooks;
}
interface ClientPluginOptions {
}
type ClientPluginFactory = (options: ClientPluginOptions, commonOptions: CommonPluginOptions, configOptions: any) => ClientHooks;
/** Starts the client. */
declare function startClient(options?: StartClientOptions, pluginOptions?: ClientPluginOptions): Promise<void>;

export { type ClientHooks, type ClientPluginFactory, type ClientPluginOptions, type StartClientOptions, startClient };
