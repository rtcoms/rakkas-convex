import { FilterPattern, Plugin } from 'vite';

interface RakkasAdapter {
    name: string;
    bundle?(root: string): Promise<void>;
    disableStreaming?: boolean;
}
declare const adapters: {
    node: {
        name: string;
    };
    "cloudflare-workers": RakkasAdapter;
    "cloudflare-workers-node-compat": {
        name: string;
        bundle(root: string): Promise<void>;
    };
    vercel: {
        name: string;
        disableStreaming: true;
        bundle(root: string): Promise<void>;
    };
    "vercel-edge": {
        name: string;
        bundle(root: string): Promise<void>;
    };
    netlify: {
        name: string;
        disableStreaming: true;
        bundle(root: string): Promise<void>;
    };
    "netlify-edge": {
        name: string;
        bundle(root: string): Promise<void>;
    };
    deno: {
        name: string;
        bundle(root: string): Promise<void>;
    };
    bun: {
        name: string;
        disableStreaming: true;
        bundle(root: string): Promise<void>;
    };
    lagon: {
        name: string;
        disableStreaming: true;
        bundle(root: string): Promise<void>;
    };
};

/** A module specifier to import, possibly with options */
type RakkasPluginHook = string | {
    specifier: string;
    options?: any;
};
interface RakkasPluginApi {
    /**
     * A module ID, or a list of module IDs, that export a function
     * that returns client-side hooks.
     */
    clientHooks?: RakkasPluginHook | RakkasPluginHook[];
    /**
     * A module ID, or a list of module IDs, that export a function
     * that returns server-side hooks.
     */
    serverHooks?: RakkasPluginHook | RakkasPluginHook[];
    /**
     * A module ID, or a list of module IDs, that export a function
     * that returns common hooks.
     */
    commonHooks?: RakkasPluginHook | RakkasPluginHook[];
    /**
     * Create routes for the application.
     */
    getRoutes?: () => RouteDefinition[] | Promise<RouteDefinition[]>;
    /**
     * If you build an alternative routing system, you can use this hook to
     * notify Rakkas that the routes have changed. Loop through all the plugins
     * in the resolved config and call this hook. Rakkas will then rerun all
     * `getRoutes` hooks and will finally call `routesResolved` hooks.
     */
    routesChanged?: () => void;
    /**
     * Called when the routes are resolved.
     */
    routesResolved?: (routes: ReadonlyArray<RouteDefinition>) => void | Promise<void>;
}
type RouteDefinition = PageRouteDefinition | ApiRouteDefinition;
interface PageRouteDefinition extends CommonRouteDefinition {
    /** The type of the route */
    type: "page";
    /** Layout modules, outermost first */
    layouts?: string[];
    /** Guard modules, in order of execution */
    guards?: string[];
    /** Page module */
    page: string;
    /** Is this a 404 page? @default false */
    is404?: boolean;
    /** Rendering mode. @default "hydrate" */
    renderingMode?: "hydrate" | "server" | "client";
}
interface ApiRouteDefinition extends CommonRouteDefinition {
    /** The type of the route */
    type: "api";
    /** Middleware modules, outermost first */
    middleware?: string[];
    /** API module */
    handler: string;
}
interface CommonRouteDefinition {
    /** The path pattern for the route */
    path: string;
}

declare module "vite" {
    interface Plugin {
        api?: {
            rakkas?: RakkasPluginApi;
        };
    }
}
interface RakkasOptions {
    /**
     * Paths to start crawling when prerendering static pages.
     * `true` is the same as `["/"]` and `false` is the same as `[]`.
     * @default false
     */
    prerender?: string[] | boolean;
    /** Whether to enable strict mode in dev. @default true */
    strictMode?: boolean;
    /** Platform adapter */
    adapter?: keyof typeof adapters | RakkasAdapter;
    /**
     * Filter patterns for server-only files that should not be included in the client bundle.
     * Patterns are interpreted as relative to the project root.
     * Files outside the project root, files inside node_modules, and CSS files are always excluded.
     *
     * @default { include: ["**\/*.server.*", "**\/server/**"] }
     */
    serverOnlyFiles?: {
        include?: FilterPattern;
        exclude?: FilterPattern;
    };
    /**
     * Filter patterns for client-only files that should not be included in the server bundle.
     * Patterns are interpreted as relative to the project root.
     * Files outside the project root, files inside node_modules, and CSS files are always excluded.
     *
     * @default { include: ["**\/*.client.*", "**\/client/**"] }
     */
    clientOnlyFiles?: {
        include?: FilterPattern;
        exclude?: FilterPattern;
    };
    /**
     * Enable/disable file system routes
     */
    fsRoutes?: boolean;
    /**
     * Config-based routes
     */
    routes?: RouteDefinition[];
}
declare function rakkas(options?: RakkasOptions): Plugin[];

export { type ApiRouteDefinition, type CommonRouteDefinition, type PageRouteDefinition, type RakkasOptions, type RakkasPluginApi, type RouteDefinition, rakkas as default };
