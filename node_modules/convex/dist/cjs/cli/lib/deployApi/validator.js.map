{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/deployApi/validator.ts"],
  "sourcesContent": ["import { z } from \"zod\";\n\nconst baseConvexValidator = z.discriminatedUnion(\"type\", [\n  z.object({ type: z.literal(\"null\") }),\n  z.object({ type: z.literal(\"number\") }),\n  z.object({ type: z.literal(\"bigint\") }),\n  z.object({ type: z.literal(\"boolean\") }),\n  z.object({ type: z.literal(\"string\") }),\n  z.object({ type: z.literal(\"bytes\") }),\n  z.object({ type: z.literal(\"any\") }),\n  z.object({ type: z.literal(\"literal\"), value: z.any() }),\n  z.object({ type: z.literal(\"id\"), tableName: z.string() }),\n]);\nexport type ConvexValidator =\n  | z.infer<typeof baseConvexValidator>\n  | { type: \"array\"; value: ConvexValidator }\n  | { type: \"record\"; keys: ConvexValidator; values: ConvexValidator }\n  | { type: \"union\"; value: ConvexValidator[] }\n  | {\n      type: \"object\";\n      value: Record<string, { fieldType: ConvexValidator; optional: boolean }>;\n    };\nexport const convexValidator: z.ZodType<ConvexValidator> = z.lazy(() =>\n  z.union([\n    baseConvexValidator,\n    z.object({ type: z.literal(\"array\"), value: convexValidator }),\n    z.object({\n      type: z.literal(\"record\"),\n      keys: convexValidator,\n      values: convexValidator,\n    }),\n    z.object({ type: z.literal(\"union\"), value: z.array(convexValidator) }),\n    z.object({\n      type: z.literal(\"object\"),\n      value: z.record(\n        z.object({ fieldType: convexValidator, optional: z.boolean() }),\n      ),\n    }),\n  ]),\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;AAElB,MAAM,sBAAsB,aAAE,mBAAmB,QAAQ;AAAA,EACvD,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,MAAM,EAAE,CAAC;AAAA,EACpC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,QAAQ,EAAE,CAAC;AAAA,EACtC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,QAAQ,EAAE,CAAC;AAAA,EACtC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,SAAS,EAAE,CAAC;AAAA,EACvC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,QAAQ,EAAE,CAAC;AAAA,EACtC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,OAAO,EAAE,CAAC;AAAA,EACrC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,KAAK,EAAE,CAAC;AAAA,EACnC,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,SAAS,GAAG,OAAO,aAAE,IAAI,EAAE,CAAC;AAAA,EACvD,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,IAAI,GAAG,WAAW,aAAE,OAAO,EAAE,CAAC;AAC3D,CAAC;AAUM,MAAM,kBAA8C,aAAE;AAAA,EAAK,MAChE,aAAE,MAAM;AAAA,IACN;AAAA,IACA,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,OAAO,GAAG,OAAO,gBAAgB,CAAC;AAAA,IAC7D,aAAE,OAAO;AAAA,MACP,MAAM,aAAE,QAAQ,QAAQ;AAAA,MACxB,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAAA,IACD,aAAE,OAAO,EAAE,MAAM,aAAE,QAAQ,OAAO,GAAG,OAAO,aAAE,MAAM,eAAe,EAAE,CAAC;AAAA,IACtE,aAAE,OAAO;AAAA,MACP,MAAM,aAAE,QAAQ,QAAQ;AAAA,MACxB,OAAO,aAAE;AAAA,QACP,aAAE,OAAO,EAAE,WAAW,iBAAiB,UAAU,aAAE,QAAQ,EAAE,CAAC;AAAA,MAChE;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": []
}
