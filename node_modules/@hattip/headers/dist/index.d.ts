/**
 * Parses a header value into an array of parts, each with a value and a set of
 * directives.
 *
 * For example a header value of `text/html; q=0.8; charset=utf-8, text/plain; q=0.5` would be parsed into:
 *
 * ```ts
 * [
 *   {
 *     value: "text/html",
 *     directives: {
 *       q: "0.5",
 *       charset: "utf-8",
 *     },
 *   },
 *   {
 *     value: "text/plain",
 *     directives: {
 *       q: "0.5",
 *     },
 *   },
 * ];
 * ```
 *
 * @param val The header value to parse.
 */
declare function parseHeaderValue(value: string | null): ParsedHeaderValue[];
/**
 * A parsed header value
 *
 * For example a header value of `text/html; q=0.8; charset=utf-8, text/plain; q=0.5` would be parsed into:
 *
 * ```ts
 * [
 *   {
 *     value: "text/html",
 *     directives: {
 *       q: "0.5",
 *       charset: "utf-8",
 *     },
 *   },
 *   {
 *     value: "text/plain",
 *     directives: {
 *       q: "0.5",
 *     },
 *   },
 * ];
 * ```
 */
interface ParsedHeaderValue {
    /** The primary value of the part */
    value: string;
    /** The directives of the part */
    directives: Record<string, string | null>;
}

/**
 * Performs content negotiation on the `Accept` header.
 *
 * @example
 * ```ts
 * const handler = accept("text/html, application/json", {
 *  "text/html": () => html("<h1>Hello world!</h1>"),
 *  "application/json": () => json({ message: "Hello world!" }),
 *  "*": () => new Response("Unacceptable", { status: 406 }),
 * });
 *
 * const response = handler();
 * console.assert(response.headers.get("content-type") === "text/html");
 * ```
 *
 * `q` values and partial and full wildcard requests are supported.
 *
 * @param header The value of the Accept header.
 * @param provided A map of content types to values. The value of the `*` key
 * is used if no other match is found.
 * @returns The value of the best match, or undefined if no match was found.
 */
declare function accept<R extends Record<string, unknown>>(header: string | null, provided: R): typeof provided extends {
    "*": infer T;
} ? T : R[keyof R] | undefined;

/**
 * Performs content negotiation on the `Accept-Language` header.
 *
 * @example
 * ```ts
 * const handler = acceptLanguage("en-US, fr;q=0.8", {
 *   "en-US": () => "Hello!",
 *   "fr": () => "Bonjour!",
 *   "*": () => "Hello!",
 * });
 *
 * const result = handler();
 * console.assert(result === "Hello!");
 * ```
 *
 * `q` values and wildcard requests are supported.
 *
 * @param header The value of the Accept-Language header.
 * @param provided A map of languages to values. The value of the `*` key
 * is used if no other match is found.
 */
declare function acceptLanguage<R extends Record<string, unknown>>(header: string | null, provided: R): R extends {
    "*": infer T;
} ? T : R[keyof R] | undefined;

export { type ParsedHeaderValue, accept, acceptLanguage, parseHeaderValue };
