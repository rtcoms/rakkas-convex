// src/index.ts
import { build } from "esbuild";
import { builtinModules } from "node:module";
import path from "node:path";
import process from "node:process";
async function bundle(options, manipulateEsbuildOptions) {
  const { cfwEntry, handlerEntry, output, serveStaticFiles } = options;
  if (!cfwEntry) {
    if (!handlerEntry) {
      throw new Error("Must provide either cfwEntry or handlerEntry");
    }
  } else {
    if (handlerEntry) {
      throw new Error("Cannot provide both cfwEntry and handlerEntry");
    }
    if (serveStaticFiles !== void 0) {
      throw new Error("Cannot provide serveStaticFiles with cfwEntry");
    }
  }
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    minify: true,
    entryPoints: [cfwEntry ?? "virtual:entry-cfw.js"],
    outfile: output,
    platform: "browser",
    target: "chrome96",
    format: "esm",
    mainFields: ["module", "main"],
    conditions: ["workerd", "worker", "import", "require"],
    external: [...builtinModules, "__STATIC_CONTENT_MANIFEST"]
  };
  if (!cfwEntry) {
    esbuildOptions.plugins = [
      {
        name: "hattip-virtual-cfw-entry",
        setup(build2) {
          build2.onResolve(
            {
              filter: /^virtual:entry-cfw\.js$/
            },
            () => ({
              path: "virtual:entry-cfw.js",
              namespace: "hattip-virtual-cfw-entry"
            })
          );
          build2.onLoad(
            {
              filter: /.*/,
              namespace: "hattip-virtual-cfw-entry"
            },
            () => {
              return {
                resolveDir: process.cwd(),
                contents: getCfwEntryContents(
                  handlerEntry,
                  serveStaticFiles === false ? "@hattip/adapter-cloudflare-workers/no-static" : "@hattip/adapter-cloudflare-workers"
                )
              };
            }
          );
        }
      }
    ];
  }
  await manipulateEsbuildOptions?.(esbuildOptions);
  await build(esbuildOptions);
}
function getCfwEntryContents(handlerEntry, adapter) {
  const relativeName = path.relative(process.cwd(), handlerEntry);
  return `
  import cloudflareWorkersAdapter from ${JSON.stringify(adapter)};
  import handler from ${JSON.stringify("./" + relativeName)};

  export default {
    fetch: cloudflareWorkersAdapter(handler),
  };
  `;
}

export {
  bundle
};
