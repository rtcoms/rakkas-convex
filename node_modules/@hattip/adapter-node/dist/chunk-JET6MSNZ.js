import {
  createRequestAdapter
} from "./chunk-R6EYZK2S.js";
import {
  sendResponse
} from "./chunk-I43NHCLP.js";

// src/common.ts
import {
  createServer as createHttpServer
} from "node:http";
import process from "node:process";
function createMiddleware(handler, options = {}) {
  const { alwaysCallNext = true, ...requestOptions } = options;
  const requestAdapter = createRequestAdapter(requestOptions);
  return async (req, res, next) => {
    try {
      const [request, ip] = requestAdapter(req);
      let passThroughCalled = false;
      const context = {
        request,
        ip,
        env(variable) {
          return process.env[variable];
        },
        waitUntil(promise) {
        },
        passThrough() {
          passThroughCalled = true;
        },
        platform: {
          name: "node",
          request: req,
          response: res
        }
      };
      const response = await handler(context);
      if (passThroughCalled && next) {
        next();
        return;
      }
      await sendResponse(response, res);
      if (next && alwaysCallNext) {
        next();
      }
    } catch (error) {
      if (next) {
        next(error);
      } else {
        console.error(error);
        if (!res.headersSent) {
          res.statusCode = 500;
        }
        if (!res.writableEnded) {
          res.end();
        }
      }
    }
  };
}
function createServer(handler, adapterOptions, serverOptions) {
  const listener = createMiddleware(handler, adapterOptions);
  return serverOptions ? createHttpServer(serverOptions, listener) : createHttpServer(listener);
}

export {
  createMiddleware,
  createServer
};
