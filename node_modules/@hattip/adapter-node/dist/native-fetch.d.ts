import { HattipHandler } from '@hattip/core';
import { IncomingMessage, ServerResponse, ServerOptions, Server } from 'node:http';
import { Socket } from 'node:net';
import { NodeRequestAdapterOptions } from './request.js';
import 'node:buffer';

interface PossiblyEncryptedSocket extends Socket {
    encrypted?: boolean;
}
/**
 * `IncomingMessage` possibly augmented by Express-specific
 * `ip` and `protocol` properties.
 */
interface DecoratedRequest extends Omit<IncomingMessage, "socket"> {
    ip?: string;
    protocol?: string;
    socket?: PossiblyEncryptedSocket;
}
/** Connect/Express style request listener/middleware */
type NodeMiddleware = (req: DecoratedRequest, res: ServerResponse, next?: (err?: unknown) => void) => void;
/** Adapter options */
interface NodeAdapterOptions extends NodeRequestAdapterOptions {
    /**
     * Whether to call the next middleware in the chain even if the request
     * was handled.@default true
     */
    alwaysCallNext?: boolean;
}
interface NodePlatformInfo {
    name: "node";
    request: DecoratedRequest;
    response: ServerResponse;
}
/**
 * Creates a request handler to be passed to http.createServer() or used as a
 * middleware in Connect-style frameworks like Express.
 */
declare function createMiddleware(handler: HattipHandler<NodePlatformInfo>, options?: NodeAdapterOptions): NodeMiddleware;
/**
 * Create an HTTP server
 */
declare function createServer(handler: HattipHandler<NodePlatformInfo>, adapterOptions?: NodeAdapterOptions, serverOptions?: ServerOptions): Server;

export { type DecoratedRequest, type NodeAdapterOptions, type NodeMiddleware, type NodePlatformInfo, createMiddleware, createServer };
