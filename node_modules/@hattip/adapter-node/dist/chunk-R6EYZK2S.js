// src/request.ts
import process from "node:process";
var deno = typeof Deno !== "undefined";
var bun = typeof Bun !== "undefined";
function createRequestAdapter(options = {}) {
  const {
    origin = process.env.ORIGIN,
    trustProxy = process.env.TRUST_PROXY === "1"
  } = options;
  let { protocol: protocolOverride, host: hostOverride } = origin ? new URL(origin) : {};
  if (protocolOverride) {
    protocolOverride = protocolOverride.slice(0, -1);
  }
  let warned = false;
  return function requestAdapter(req) {
    function parseForwardedHeader(name) {
      return (headers["x-forwarded-" + name] || "").split(",", 1)[0].trim();
    }
    let headers = req.headers;
    if (headers[":method"]) {
      headers = Object.fromEntries(
        Object.entries(headers).filter(([key]) => !key.startsWith(":"))
      );
    }
    const ip = req.ip || trustProxy && parseForwardedHeader("for") || req.socket?.remoteAddress || "";
    const protocol = protocolOverride || req.protocol || trustProxy && parseForwardedHeader("proto") || req.socket?.encrypted && "https" || "http";
    let host = hostOverride || trustProxy && parseForwardedHeader("host") || headers.host;
    if (!host && !warned) {
      console.warn(
        "Could not automatically determine the origin host, using 'localhost'. Use the 'origin' option or the 'ORIGIN' environment variable to set the origin explicitly."
      );
      warned = true;
      host = "localhost";
    }
    const request = new Request(protocol + "://" + host + req.url, {
      method: req.method,
      headers,
      body: convertBody(req),
      // @ts-expect-error: Node requires this when the body is a ReadableStream
      duplex: "half"
    });
    return [request, ip];
  };
}
function convertBody(req) {
  if (req.method === "GET" || req.method === "HEAD") {
    return;
  }
  if (req.rawBody !== void 0) {
    return req.rawBody;
  }
  if (!bun && !deno) {
    return req;
  }
  return new ReadableStream({
    start(controller) {
      req.on("data", (chunk) => controller.enqueue(chunk));
      req.on("end", () => controller.close());
      req.on("error", (err) => controller.error(err));
    }
  });
}

export {
  createRequestAdapter
};
