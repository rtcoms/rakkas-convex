// src/index.ts
import { build } from "esbuild";
import { builtinModules } from "node:module";
import fs from "node:fs";
import cpr from "cpr";
import { promisify } from "node:util";
async function bundle(options = {}) {
  const {
    outputDir = "netlify",
    clearOutputDir = true,
    staticDir,
    edgeEntry,
    functionEntry,
    manipulateEsbuildOptions
  } = options;
  if (!staticDir && !edgeEntry && !functionEntry) {
    throw new Error(
      "Must provide at least one of staticDir, edgeEntry, or functionEntry"
    );
  }
  if (clearOutputDir && fs.existsSync(outputDir)) {
    await fs.promises.rm(outputDir, { recursive: true, force: true });
  }
  await fs.promises.mkdir(outputDir, { recursive: true });
  if (staticDir) {
    await promisify(cpr)(staticDir, outputDir + "/static", {
      deleteFirst: true
    });
  }
  if (edgeEntry) {
    await bundleEdgeFunction(
      edgeEntry,
      outputDir + "/edge-functions/edge",
      manipulateEsbuildOptions
    );
  }
  if (functionEntry) {
    await bundleRegularFunction(
      functionEntry,
      outputDir + "/functions/function",
      manipulateEsbuildOptions
    );
    await fs.promises.writeFile(
      outputDir + "/static/_redirects",
      "/*  /.netlify/functions/function  200\n"
    );
  }
}
async function bundleEdgeFunction(entry, outputDir, manipulateEsbuildOptions) {
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    minify: true,
    entryPoints: [entry],
    outfile: outputDir + "/index.js",
    platform: "browser",
    target: "chrome96",
    format: "esm",
    mainFields: ["module", "main", "browser"],
    conditions: ["worker", "import", "require"],
    external: builtinModules
  };
  await manipulateEsbuildOptions?.(esbuildOptions, "edge");
  await build(esbuildOptions);
}
async function bundleRegularFunction(entry, outputDir, manipulateEsbuildOptions) {
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    minify: true,
    entryPoints: [entry],
    outfile: outputDir + "/index.js",
    platform: "node",
    target: "node16",
    format: "esm",
    external: builtinModules
  };
  await manipulateEsbuildOptions?.(esbuildOptions, "regular");
  await build(esbuildOptions);
}

export {
  bundle,
  bundleEdgeFunction,
  bundleRegularFunction
};
