import {
  install
} from "./chunk-Q43DAQ2S.js";

// src/node-fetch.ts
import * as nodeFetch from "node-fetch-native";
import { Readable } from "node:stream";
function install2() {
  function define(name, value = nodeFetch[name]) {
    if (!globalThis[name]) {
      Object.defineProperty(globalThis, name, {
        value,
        configurable: true
      });
    }
  }
  define("AbortController");
  define("Blob");
  define("File");
  define("FormData");
  define("Headers");
  if (globalThis.Response) return;
  class Response2 extends nodeFetch.Response {
    constructor(input, init) {
      if (input instanceof ReadableStream) {
        input = Readable.from(input);
      }
      super(input, init);
    }
  }
  class Request2 extends nodeFetch.Request {
    constructor(input, init) {
      if (init?.body instanceof ReadableStream) {
        const body = Readable.from(init.body);
        init = new Proxy(init, {
          get(target, prop) {
            if (prop === "body") {
              return body;
            }
            return target[prop];
          }
        });
      }
      super(input, init);
    }
  }
  Object.defineProperty(Response2, "name", {
    value: "Response",
    writable: false
  });
  Object.defineProperty(Request2, "name", {
    value: "Request",
    writable: false
  });
  define("Response", Response2);
  if (globalThis.Request) {
    install();
  } else {
    define("Request", Request2);
  }
  define(
    "fetch",
    (input, init) => nodeFetch.default(input, init).then((r) => {
      Object.setPrototypeOf(r, Response2.prototype);
      return r;
    })
  );
}
export {
  install2 as default
};
