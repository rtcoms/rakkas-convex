import { AdapterRequestContext, HattipHandler } from '@hattip/core';

interface RequestContextExtensions {
}
/** App-local stuff */
interface Locals {
}
/**
 * Request context
 */
interface RequestContext<P = unknown> extends AdapterRequestContext<P>, RequestContextExtensions {
    /** Parsed request URL */
    url: URL;
    /** Request method */
    method: string;
    /** App-local stuff */
    locals: Locals;
    /** Call the next handler in the chain */
    next(): Promise<Response>;
    /** Redefine to handle errors by generating a response from an error */
    handleError(error: unknown): Response | Promise<Response>;
}
interface ResponseConvertible {
    toResponse(): Response | Promise<Response>;
}
type ResponseLike = Response | ResponseConvertible;
type MaybeRespone = ResponseLike | void;
type MaybeAsyncResponse = MaybeRespone | Promise<MaybeRespone>;
type RequestHandler<P = unknown> = (context: RequestContext<P>) => MaybeAsyncResponse;
type MaybeRequestHandler<P = unknown> = false | null | undefined | RequestHandler<P>;
type RequestHandlerStack<P = unknown> = MaybeRequestHandler<P> | MaybeRequestHandler<P>[];
type PartialHandler<P = unknown> = (context: RequestContext<P>) => Response | void | Promise<Response | void>;
declare function composePartialOld<P = unknown>(handlers: RequestHandlerStack<P>[], next?: () => Promise<Response>): PartialHandler;
declare function compose<P = unknown>(...handlers: RequestHandlerStack<P>[]): HattipHandler<P>;
declare function composeOld<P = unknown>(...handlers: RequestHandlerStack<P>[]): HattipHandler<P>;
declare function composePartial<P = unknown>(handlers: RequestHandlerStack<P>[]): PartialHandler<P>;

export { type Locals, type MaybeAsyncResponse, type MaybeRequestHandler, type MaybeRespone, type PartialHandler, type RequestContext, type RequestContextExtensions, type RequestHandler, type RequestHandlerStack, type ResponseConvertible, type ResponseLike, compose, composeOld, composePartial, composePartialOld };
