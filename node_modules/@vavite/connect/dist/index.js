// src/index.ts
import path from "node:path";
import url from "node:url";
var dirname = typeof __dirname === "undefined" ? url.fileURLToPath(new URL(".", import.meta.url)) : __dirname;
function vaviteConnect(options = {}) {
  const {
    handlerEntry = "/handler",
    customServerEntry,
    serveClientAssetsInDev = false,
    standalone = true,
    clientAssetsDir = null,
    bundleSirv = true,
    useViteRuntime = process.env.USE_VITE_RUNTIME === "true"
  } = options;
  let viteRuntime;
  return [
    {
      name: "@vavite/connect:resolve",
      enforce: "pre",
      async resolveId(id) {
        if (id === "/virtual:vavite-connect-handler") {
          return this.resolve(handlerEntry);
        } else if (id === "/virtual:vavite-connect-server") {
          return path.resolve(
            dirname,
            clientAssetsDir ? bundleSirv ? "entry-standalone-bundled-sirv.js" : "entry-standalone-imported-sirv.js" : "entry-standalone.js"
          ).replace(/\\/g, "/");
        }
      }
    },
    {
      name: "@vavite/connect:server",
      config(config, env) {
        const common = {
          optimizeDeps: {
            // This silences the "could not auto-determine entry point" warning
            include: []
          }
        };
        if (env.command === "build" && config.build?.ssr) {
          return {
            ...common,
            build: {
              rollupOptions: {
                input: {
                  index: customServerEntry || (standalone ? "/virtual:vavite-connect-server" : "/virtual:vavite-connect-handler")
                }
              }
            },
            define: clientAssetsDir ? {
              __VAVITE_CLIENT_BUILD_OUTPUT_DIR: JSON.stringify(clientAssetsDir)
            } : {}
          };
        }
        return common;
      },
      configureServer(server) {
        function addMiddleware() {
          server.middlewares.use(async (req, res, next) => {
            req.url = req.originalUrl || req.url;
            try {
              let runner = server.ssrLoadModule.bind(server);
              if (useViteRuntime) {
                if (!viteRuntime) {
                  const { createViteRuntime } = await import("vite");
                  viteRuntime = await createViteRuntime(server);
                }
                runner = viteRuntime.executeEntrypoint.bind(viteRuntime);
              }
              const module = await runner(handlerEntry);
              await module.default(req, res, (error) => {
                if (error) {
                  next(error);
                } else if (!res.writableEnded) {
                  next();
                }
              });
            } catch (err) {
              if (err instanceof Error) {
                server.ssrFixStacktrace(err);
              }
              next(err);
            }
          });
        }
        if (serveClientAssetsInDev) {
          return addMiddleware;
        } else {
          addMiddleware();
        }
      }
    }
  ];
}
export {
  vaviteConnect
};
